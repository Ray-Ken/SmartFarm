version: '3'

services:

    zookeeper:
        image: wurstmeister/zookeeper
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.10
        ports:
          - "2181:2181"
        logging:
          driver: gelf
          options:
            gelf-address: udp://172.16.238.51:12201
            tag: "staging"
        links:
          - logstash:logstash
        depends_on:
          - logstash

    kafka:
        image: wurstmeister/kafka
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.11
        ports:
          - "9092:9092"
        environment:
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ADVERTISED_HOST_NAME: 172.16.238.11
          KAFKA_ZOOKEEPER_CONNECT: 172.16.238.10:2181
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        links:
        logging:
          driver: gelf
          options:
            gelf-address: udp://172.16.238.51:12201
            tag: "staging"
        links:
          - logstash:logstash
          - zookeeper
        depends_on:
          - logstash

    postgredb:
        image: postgres
        restart: always
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smartfarm
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.12
        ports:
          - "5432:5432"
        logging:
          driver: gelf
          options:
            gelf-address: udp://172.16.238.51:12201
            tag: "staging"
        links:
          - logstash:logstash
        depends_on:
          - logstash

    mongo:
        image: 'mongo:latest'
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.15
        ports:
          - 27017:27017
        logging:
          driver: gelf
          options:
            gelf-address: udp://172.16.238.51:12201
            tag: "staging"
        links:
          - logstash:logstash
        depends_on:
          - logstash

    tomcat:
        image: tomcat
        restart: always
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.20
        ports:
          - "8080:8080"
        environment:
            - kafka_bootstrap_servers=172.16.238.11:9092
            - datasource_postgres_alerts=jdbc:postgresql://172.16.238.12:5432/
            - datasource_postgres=jdbc:postgresql://172.16.238.12:5432/
            - datasource_postgres_triggered_alerts=jdbc:postgresql://172.16.238.12:5432/
            - datasource_username=postgres
            - datasource_password=postgres
            - mongo_host=172.16.238.15
        volumes:
          - "./service-layer/target/ServiceLayer-0.0.1-SNAPSHOT.war:/usr/local/tomcat/webapps/ROOT.war"
          - "./service-layer/target/ServiceLayer-0.0.1-SNAPSHOT:/usr/local/tomcat/webapps/ROOT"
          - "./long-term-persistence/target/LongTermPersistence-0.0.1-SNAPSHOT.war:/usr/local/tomcat/webapps/persistence.war"
          - "./alerts-management/target/AlertsManagement-0.0.1-SNAPSHOT.war:/usr/local/tomcat/webapps/alerts.war"
          - "./alerts-management/target/AlertsManagement-0.0.1-SNAPSHOT:/usr/local/tomcat/webapps/alerts"
          - "./triggered-alerts/target/TriggeredAlerts-0.0.1-SNAPSHOT.war:/usr/local/tomcat/webapps/triggeredalerts.war"
          - "./triggered-alerts/target/TriggeredAlerts-0.0.1-SNAPSHOT:/usr/local/tomcat/webapps/triggeredalerts"
        depends_on:
          - kafka
          - mongo
          - postgredb

    nginx_proxy:
        image: nginx
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.30
        ports:
          - "8000:80"
        volumes:
          - ./nginx.conf:/etc/nginx/nginx.conf
        command: [nginx, '-g', 'daemon off;']
        logging:
          driver: gelf
          options:
            gelf-address: udp://172.16.238.51:12201
            tag: "staging"
        links:
          - logstash:logstash
        depends_on:
          - logstash
          - tomcat

   dashboard:
       build:
         context: ./dashboard
         dockerfile: Dockerfile
       volumes:
         - './dashboard:/usr/src/app'
         - '/usr/src/app/node_modules'
       networks:
         smartfarm_net:
           ipv4_address: 172.16.238.40
       ports:
         - '3000:3000'
       environment:
         - NODE_ENV=development
       depends_on:
        - nginx_proxy
        - logstash
       logging:
         driver: gelf
         options:
           gelf-address: udp://172.16.238.51:12201
           tag: "staging"
       links:
         - logstash:logstash

    elasticsearch:
        build:
          context: elasticsearch/
        volumes:
          - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
        ports:
          - "9200:9200"
          - "9300:9300"
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.50

    logstash:
        build:
          context: logstash/
        volumes:
          - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
          - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
        ports:
          - "5000:5000"
          - "12201:12201/udp"
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.51
        depends_on:
          - elasticsearch

    kibana:
        build:
          context: kibana/
        volumes:
          - ./kibana/config/:/usr/share/kibana/config:ro
        ports:
          - "5601:5601"
        networks:
          smartfarm_net:
            ipv4_address: 172.16.238.52
        depends_on:
          - elasticsearch

    # Define a Telegraf service
    telegraf:
      image: telegraf:1.4.0
      volumes:
        - ./etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      links:
        - influxdb
      ports:
        - "8092:8092/udp"
        - "8094:8094"
        - "8125:8125/udp"
    # Define an InfluxDB service
    influxdb:
      image: influxdb:1.3.5
      volumes:
        - ./data/influxdb:/var/lib/influxdb
      ports:
        - "8086:8086"
    # Define a Chronograf service
    chronograf:
      image: chronograf:1.3.8
      environment:
        INFLUXDB_URL: http://influxdb:8086
        KAPACITOR_URL: http://kapacitor:9092
      ports:
        - "8888:8888"
      links:
        - influxdb
        - kapacitor
    # Define a Kapacitor service
    kapacitor:
      image: kapacitor:1.3.3
      environment:
        KAPACITOR_HOSTNAME: kapacitor
        KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
      links:
        - influxdb
      ports:
        - "9095:9092"
    # Define a service for using the influx CLI tool.
    # docker-compose run influxdb-cli
    influxdb-cli:
      image: influxdb:1.3.5
      entrypoint:
        - influx
        - -host
        - influxdb
      links:
        - influxdb
    # Define a service for using the kapacitor CLI tool.
    # docker-compose run kapacitor-cli
    kapacitor-cli:
      image: kapacitor:1.3.3
      entrypoint: bash
      environment:
        KAPACITOR_URL: http://kapacitor:9092
      links:
        - kapacitor

networks:
    smartfarm_net:
        driver: bridge
        ipam:
          driver: default
          config:
          - subnet: 172.16.238.0/24
